    {{#useGzipFeature}}
    @GZIP
    {{/useGzipFeature}}
    @{{httpMethod}}{{#subresourceOperation}}
    @Path("{{{path}}}"){{/subresourceOperation}}{{#hasConsumes}}
    @Consumes({ {{#consumes}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/consumes}} }){{/hasConsumes}}{{#hasProduces}}
    @Produces({ {{#produces}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/produces}} }){{/hasProduces}}{{#useSwaggerAnnotations}}
    @ApiOperation(value = "{{{summary}}}", notes = "{{{notes}}}", response = {{{returnBaseType}}}.class{{#returnContainer}}, responseContainer = "{{{.}}}"{{/returnContainer}}{{#hasAuthMethods}}, authorizations = {
        {{#authMethods}}{{#isOAuth}}@Authorization(value = "{{name}}", scopes = {
            {{#scopes}}@AuthorizationScope(scope = "{{scope}}", description = "{{description}}"){{^-last}},
            {{/-last}}{{/scopes}} }){{^-last}},{{/-last}}{{/isOAuth}}
        {{^isOAuth}}@Authorization(value = "{{name}}"){{^-last}},{{/-last}}
        {{/isOAuth}}{{/authMethods}} }{{/hasAuthMethods}}, tags={ {{#vendorExtensions.x-tags}}"{{tag}}"{{^-last}}, {{/-last}}{{/vendorExtensions.x-tags}} })
    {{#implicitHeadersParams.0}}
    @io.swagger.annotations.ApiImplicitParams({
        {{#implicitHeadersParams}}
        @io.swagger.annotations.ApiImplicitParam(name = "{{{baseName}}}", value = "{{{description}}}", {{#required}}required = true,{{/required}} dataType = "{{{dataType}}}", paramType = "header"){{^-last}},{{/-last}}
        {{/implicitHeadersParams}}
    })
    {{/implicitHeadersParams.0}}
    @ApiResponses(value = { {{#responses}}
        @ApiResponse(code = {{{code}}}, message = "{{{message}}}", response = {{{baseType}}}.class{{#containerType}}, responseContainer = "{{{.}}}"{{/containerType}}){{^-last}},{{/-last}}{{/responses}}
    }){{/useSwaggerAnnotations}}
    public {{>apiResponse}} {{nickname}}({{#allParams}}{{>queryParams}}{{>pathParams}}{{>cookieParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{^-last}},{{/-last}}{{/allParams}}) {
        {{#allParams}}
        {{#isBodyParam}}
        {{{dataType}}} {{paramName}} = mappers.from{{{dataType}}}Dto({{paramName}}Dto);
        LOGGER.debug({{paramName}});
        {{/isBodyParam}}
        {{/allParams}}
        return {{#restfulDestroy}}Uni.createFrom().voidItem();//{{/restfulDestroy}}sf.withTransaction(session -> {{#restfulCreate}}session.persist({{#allParams}}{{#isBodyParam}}{{paramName}}{{/isBodyParam}}{{/allParams}}){{/restfulCreate}}{{#restfulDestroy}}session.find(Lottery.class, {{#pathParams}}{{baseName}}{{/pathParams}}).call(book -> session.remove(book)){{/restfulDestroy}}{{#restfulIndex}}session.find({{returnBaseType}}.class){{/restfulIndex}}{{#restfulShow}}session.find({{returnBaseType}}.class,{{#pathParams}}{{baseName}}{{/pathParams}}){{/restfulShow}}{{#restfulUpdate}}session.find({{#allParams}}{{#isBodyParam}}{{dataType}}{{/isBodyParam}}{{/allParams}}.class, {{#pathParams}}{{baseName}}{{/pathParams}}).call(book -> session.refresh({{#allParams}}{{#isBodyParam}}{{paramName}}{{/isBodyParam}}{{/allParams}})){{/restfulUpdate}}){{#restfulUpdate}}.replaceWithVoid(){{/restfulUpdate}}{{#restfulDestroy}}.replaceWithVoid(){{/restfulDestroy}};
    }
