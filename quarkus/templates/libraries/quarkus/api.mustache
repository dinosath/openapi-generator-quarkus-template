package {{package}};

{{#imports}}
import {{import}}Dto;
import {{import}};
{{/imports}}

//import {{javaxPackage}}.ws.rs.*;
//import {{javaxPackage}}.ws.rs.core.Response;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.Response;

{{#useGzipFeature}}
import org.jboss.resteasy.annotations.GZIP;
{{/useGzipFeature}}

{{#useSwaggerAnnotations}}
import io.swagger.annotations.*;
{{/useSwaggerAnnotations}}
{{#supportAsync}}
import java.util.concurrent.CompletionStage;
import java.util.concurrent.CompletableFuture;
{{/supportAsync}}

import java.io.InputStream;
import java.util.Map;
import java.util.List;
{{#useBeanValidation}}
//import {{javaxPackage}}.validation.constraints.*;
//import {{javaxPackage}}.validation.Valid;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;
{{/useBeanValidation}}
{{^interfaceOnly}}
import org.hibernate.reactive.mutiny.Mutiny;
//import javax.inject.Inject;
import jakarta.inject.Inject;
import org.jboss.logging.Logger;
import io.smallrye.mutiny.Uni;
import {{invokerPackage}}.Mappers;
{{/interfaceOnly}}

@Path("{{commonPath}}"){{#useSwaggerAnnotations}}
@Api(description = "the {{{baseName}}} API"){{/useSwaggerAnnotations}}{{#hasConsumes}}
@Consumes({ {{#consumes}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/consumes}} }){{/hasConsumes}}{{#hasProduces}}
@Produces({ {{#produces}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/produces}} }){{/hasProduces}}
{{>generatedAnnotation}}
public {{#interfaceOnly}}interface{{/interfaceOnly}}{{^interfaceOnly}}class{{/interfaceOnly}} {{classname}} {
{{^interfaceOnly}}

    private static final Logger LOGGER = Logger.getLogger({{classname}}.class);

    @Inject
    Mutiny.SessionFactory sf;
    
    @Inject
    Mappers mappers;

//    @Inject
//    public {{classname}}(Mutiny.SessionFactory sf,Mappers mappers){
//      this.sf = sf;
//      this.mappers = mappers;
//    }

{{/interfaceOnly}}
{{#operations}}
{{#operation}}

{{#interfaceOnly}}{{>apiInterface}}{{/interfaceOnly}}{{^interfaceOnly}}{{>apiMethod}}{{/interfaceOnly}}
{{/operation}}
}
{{/operations}}
