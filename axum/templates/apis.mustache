use axum::{
    async_trait,
    extract::{FromRef, FromRequestParts, State},
    http::{request::Parts, StatusCode},
    response::{Json,IntoResponse},
    routing::{get, post},
    Router,
};
use diesel_async::{pooled_connection::AsyncDieselConnectionManager, AsyncPgConnection};

type Pool = bb8::Pool<AsyncDieselConnectionManager<AsyncPgConnection>>;


fn internal_error<E>(err: E) -> (StatusCode, String)
where
    E: std::error::Error,
{
    (StatusCode::INTERNAL_SERVER_ERROR, err.to_string())
}

struct DatabaseConnection(
    bb8::PooledConnection<'static, AsyncDieselConnectionManager<AsyncPgConnection>>,
);


{{#apiInfo}}
  {{#apis}}
    {{#operations}}
      {{#operation}}
        {{#vendorExtensions}}
            {{#x-operation-id}}
pub async fn {{{x-operation-id}}}(
    State(pool): State<deadpool_diesel::postgres::Pool>

    {{#allParams}}



        {{#isPathParam}}
        ,{{{paramName}}}: {{^required}}Option<{{/required}}Json<{{#isArray}}&{{/isArray}}{{{dataType}}}>{{^required}}>{{/required}}
        {{/isPathParam}}
        {{^isPathParam}}
        ,{{{paramName}}}: {{^required}}Option<{{/required}}Json<{{#isArray}}&{{/isArray}}{{{dataType}}}>{{^required}}>{{/required}}
        {{/isPathParam}}
    {{/allParams}}

) -> impl IntoResponse {

    (StatusCode::CREATED,Json(json!({})),)

}

            {{/x-operation-id}}
        {{/vendorExtensions}}
      {{/operation}}
    {{/operations}}
  {{/apis}}
{{/apiInfo}}
