use axum::{async_trait,extract::{FromRef, FromRequestParts, State},http::{request::Parts, StatusCode},response::Json,routing::{get, post},Router,};
use diesel::prelude::*;
use diesel_async::{pooled_connection::AsyncDieselConnectionManager, AsyncPgConnection, RunQueryDsl,};
use std::net::SocketAddr;
use tracing_subscriber::{layer::SubscriberExt, util::SubscriberInitExt};

mod apis;
use apis::{ {{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}{{operationIdSnakeCase}},{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}} };

#[actix_web::main]
async fn main() -> std::io::Result<()> {
    env_logger::init_from_env(env_logger::Env::new().default_filter_or("info"));
    dotenv().ok();

    tracing_subscriber::registry()
        .with(
            tracing_subscriber::EnvFilter::try_from_default_env()
                .unwrap_or_else(|_| "example_diesel_async_postgres=debug".into()),
        )
        .with(tracing_subscriber::fmt::layer())
        .init();

    let db_url = std::env::var("DATABASE_URL").unwrap();

    let config = AsyncDieselConnectionManager::<diesel_async::AsyncPgConnection>::new(db_url);
    let pool = bb8::Pool::builder().build(config).await.unwrap();

    let app = Router::new()
{{#apiInfo}}
  {{#apis}}
    {{#operations}}
      {{#operation}}
            .route("{{path}}",{{operationIdSnakeCase}})
      {{/operation}}
    {{/operations}}
  {{/apis}}
{{/apiInfo}}

        .with_state(pool);

    let addr = SocketAddr::from(([127, 0, 0, 1], 3000));
    tracing::debug!("listening on {}", addr);
    axum::Server::bind(&addr)
        .serve(app.into_make_service())
        .await
        .unwrap();
}
